# syntax = docker/dockerfile:1

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version and Gemfile
ARG RUBY_VERSION=3.3.3
FROM registry.docker.com/library/ruby:$RUBY_VERSION-bookworm as concerto-stage0


# Rails app lives here
WORKDIR /rails

ENV RAILS_ENV="development" \
    GEM_HOME="/usr/local/bundle" \
    PATH=$GEM_HOME/bin:$GEM_HOME/gems/bin:$PATH

# Set production environment
# ENV RAILS_ENV="production" \
#     BUNDLE_DEPLOYMENT="1" \
#     BUNDLE_PATH="/usr/local/bundle" \
#     BUNDLE_WITHOUT="development"


# install packages needed for both build and runtime
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    nodejs


# -------------------------------------------------------------------
# Throw-away build stage to reduce size of final image
# -------------------------------------------------------------------

FROM concerto-stage0 as concerto-stage1


# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    git libvips pkg-config \
    libmagickwand-dev

# Install application gems

COPY Gemfile Gemfile.lock ./

RUN bundle config set frozen true && \
    bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache  "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile



# -------------------------------------------------------------------
# Throw-away build stage to reduce size of final image
# -------------------------------------------------------------------

FROM concerto-stage1 as concerto-stage2

# Copy application code
COPY . .

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
# Precompile bootsnap code for faster boot times

RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile && \
    bundle exec bootsnap precompile app/ lib/

    # db setup in entrypoint, skip here
    # && \
    # bin/rails db:migrate && \
    # bin/rails db:seed


# -------------------------------------------------------------------
# Add Runtime dependencies
# skips the two build stages!!!
# -------------------------------------------------------------------
FROM concerto-stage0 as concerto-stage3
ENV RAILS_ENV="development"

# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
           curl \
           imagemagick \
           libsqlite3-0 libvips && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy built artifacts: gems, application
COPY --from=concerto-stage1 /usr/local/bundle /usr/local/bundle


# -------------------------------------------------------------------
# production
# -------------------------------------------------------------------
FROM concerto-stage3 as concerto-production
ENV RAILS_ENV="production"

# copy the app
COPY --from=concerto-stage2 /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN useradd rails --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp
USER rails:rails

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["./bin/rails", "server"]
# CMD ["bash"]


# -------------------------------------------------------------------
# development
# -------------------------------------------------------------------
FROM concerto-stage3 as concerto-development
ENV RAILS_ENV="development"

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["./bin/rails", "server"]
# CMD ["bash"]
